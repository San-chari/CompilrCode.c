#include <stdio.h>
#include <stdbool.h>
#include <string.h>
#include <ctype.h>

// Function to check if a character is a valid part of an identifier
bool isValidCharacter(char ch) {
    return (isalpha(ch) || isdigit(ch) || ch == '_');
}

// Function to check if a string is a valid identifier
bool isValidIdentifier(char *identifier) {
    int length = strlen(identifier);
    
    // Check if the length is greater than 0 and if the first character is a valid start
    if (length == 0 || (!isalpha(identifier[0]) && identifier[0] != '_'))
        return false;

    // Check each character in the identifier
    for (int i = 1; i < length; i++) {
        if (!isValidCharacter(identifier[i]))
            return false;
    }
    
    // Check if the identifier is not a keyword
    char *keywords[] = {"auto", "break", "case", "char", "const", "continue", "default", 
                        "do", "double", "else", "enum", "extern", "float", "for", "goto",
                        "if", "int", "long", "register", "return", "short", "signed",
                        "sizeof", "static", "struct", "switch", "typedef", "union",
                        "unsigned", "void", "volatile", "while"};
    int num_keywords = sizeof(keywords) / sizeof(keywords[0]);
    for (int i = 0; i < num_keywords; i++) {
        if (strcmp(identifier, keywords[i]) == 0)
            return false;
    }

    // If all checks passed, the identifier is valid
    return true;
}

int main() {
    char identifier[50];
    
    printf("Enter an identifier: ");
    scanf("%s", identifier);
    
    if (isValidIdentifier(identifier))
        printf("'%s' is a valid identifier.\n", identifier);
    else
        printf("'%s' is not a valid identifier.\n", identifier);
    
    return 0;
}â€ƒ
